(define-module net.twitter.auth.persistent
  (use net.twitter.core)
  (export
   print-credential
   write-credential!
   read-credential save-credential!))
(select-module net.twitter.auth.persistent)

(define (%cred->sexp cred)
  (list
   (cons 'consumer-key        (~ cred'consumer-key))
   (cons 'consumer-secret     (~ cred'consumer-secret))
   (cons 'access-token        (~ cred'access-token))
   (cons 'access-token-secret (~ cred'access-token-secret))
   ))

;; ## Print SEXP to output port.
;; -> <void>
(define (%print-sexp sexp :optional (port (current-output-port)))
  (with-output-to-port port
    (^[]
      (display "(\n")
      (dolist (x sexp)
        (format #t "  ~s\n" x))
      (display ")\n"))))

;;;
;;; # API
;;;

;; ## Main entry point
;; `save-credential!` <-> `read-credential`

;; ## Write oauth credential SEXP to FILE
;; Save credential generated by `net/twitauth.scm` script
;; -> <void>
(define (write-credential! sexp file)
  (call-with-output-file file
    (^p (%print-sexp sexp p)))
  (sys-chmod file #o600))

;; ## Print CRED to output port. Intended use from `twitauth.scm` script.
;; -> <void>
(define (print-credential cred :optional (port (current-output-port)))
  (let1 sexp (%cred->sexp cred)
    (%print-sexp sexp port)))

;; ## Write oauth credential CRED to FILE
;; -> <void>
(define (save-credential! cred file)
  (let1 sexp (%cred->sexp cred)
    (write-credential! sexp file)))

;; ## Read oauth credential from FILE
;; -> <twitter-cred>
(define (read-credential file)
  (let1 sexp (with-input-from-file file read)
    (make <twitter-cred>
      :consumer-key         (assq-ref sexp 'consumer-key)
      :consumer-secret      (assq-ref sexp 'consumer-secret)
      :access-token         (assq-ref sexp 'access-token)
      :access-token-secret  (assq-ref sexp 'access-token-secret))))
