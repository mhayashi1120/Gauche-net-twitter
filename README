This module provides an interface to Twitter API using OAuth authentication.

Step by step:

1. Install the package.

   From tarball:

     $ gauche-package install [-S root] Gauche-net-twitter-1.0.tgz

   From source:

     $ git clone git://github.com/shirok/Gauche-net-twitter.git
     $ cd Gauche-net-twitter
     $ ./DIST gen
     $ ./configure
     $ make
     $ make -s check
     $ [sudo] make install

   ('-S root' option or 'sudo' may be required if you want to install
   the package system-wide.)

2. Register your application at http://twitter.com/oauth_clients
   * Check 'Client' in the Application Type question.
   * No need to check 'Use Twitter for login' box.
   * Save "Consumer key" and "Consumer secret" shown in the next screen.

3. Let the user to grant access to his/her twitter account via your client.
   How to handle this depends on your client.  If you (application author)
   just want to grant your application to access *your* twitter account,
   there's a simple script net/twitauth.scm that handles the process.  Run
   it as 'gosh net/twitauth'.   (If you haven't installed the module,
   cd to Gauche-net-twitter and run 'gosh -I. net/twitauth').
   It asks you to type your application's consumer key and consumer secret.

     $ gosh net/twitauth
     Enter consumer key: XXXXXXXXXXXXXXXXXXX
     Enter consumer secret: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXx

   Then it shows an URL you should access by your browser.

     Open the following url and type in the shown PIN.
     https://api.twitter.com/oauth/authorize?oauth_token=XXXXXXXXXXXXXXXXXXX
     Input PIN: 

   The page asks you if you grant access to the applicatio or not.
   If you click "Accept", it shows 7-digit PIN.   Type that PIN
   into the above 'Input PIN' prompt.

   Then the script shows information necessary to access to your Twitter
   account.  Save them.

   (
    (consumer-key        . "XXXXXXXXXXXXXXXXXXXX")
    (consumer-secret     . "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
    (access-token        . "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
    (access-token-secret . "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
   )

   NB: If you intend to distribute your application to others and allow
   them to grant the application's access to their Twitter account, you
   would want to have better UI.  You can design your interaction with
   twitter-authenticate-client procedure described below.


4. In your program, create a <twitter-cred> instance with the above
   information, and use it to call Twitter API.

    (define *cred* (make <twitter-cred>
                     :consumer-key "XXX.....XXX"
                     :consumer-secret "XXX.....XXX"
                     :access-token "XXX......XXX"
                     :access-token-secret "XXX.....XXX"))

    (twitter-update *cred* "Post from my application!")
   


Module API:

Some twitter API interface come with several flavors.  Procedures
suffixed by /sxml return SXML representation of the server response,
along the list of message headers.  They are for applications that
needs full access to the server response.  Procedures without suffix,
or different suffix, return more convenient values, so that the
caller won't need to scan SXML.

For instance, twitter-followers/sxml returns two values such as
the following (each result is truncated for conciseness):

  gosh> (twitter-followers/sxml cred :screen-name "chaton_gauche")
  (*TOP*
   (*PI* xml "version=\"1.0\" encoding=\"UTF-8\"")
   (ids (id "75017042") (id "5327762") (id "69605132") (id "151305186")
    (id "68190981") (id "18044198") (id "149962169") (id "114554818")
    (id "10967962") (id "14988077") (id "19059915") (id "37883768")
    (id "15674085") ....))
  (("date" "Mon, 07 Jun 2010 02:03:04 GMT")
   ("server" "hi")
   ("status" "200 OK")
   ("x-transaction" "1275876184-68906-26775")
   ("x-ratelimit-limit" "150")
   ("etag" "\"83b847f06bfe0338b8c62c85f39a8294\"")
   ....)

While twitter-followers/ids just returns a list of user ids:

  gosh> (twitter-followers/ids cred :screen-name "chaton_gauche")
  ("75017042" "5327762" "69605132" "151305186" "68190981" ...)

In both versions, if the server returns response other than 200,
a condition <twitter-api-error> is signalled.


[Module] net.twitter

[Class] <twitter-cred>

  An object holding necessary information to access to the user's Twitter
  account.  It has the following instance slots.

   consumer-key
   consumer-secret
   access-token
   access-token-secret

[Condition type] <twitter-api-error>

  A condition thrown when twitter server returns a response other
  than 200.  The condition has the following slots.

   status        (string) response status code, e.g. "403"
   headers       (list of (string string)) list of response headers.
   body          (string) response body, as is.
   body-sxml     (maybe SXML) if response body is XML, it is parsed and
                 SXML is set to this slots.  Otherwise it is #f.

[Function] twitter-authenticate-client consumer-key consumer-secret
                                       :optional input-callback

  Authenticate the client using twitter's PIN-based OAuth authentication
  flow.  First it obtains request-token, then ask the user to access
  a specific URL to grant access by the client.  Once the user grant access,
  Twitter presents a PIN to the user, which should be fed back
  to the procedure to obtain access token and secret.

  Once this process completes, the client program can store the access
  token and access token secret to access the user's Twitter account,
  until the user explicitly asks to discard those credentials.  So, 
  in general, this procedure needs to be called once per user per client.

  The INPUT-CALLBACK is a procedure that handles user intervention.
  It is called by one argument, the Twitter URL the user should access.
  By default it prints the URL and asks the user to go there and obtain
  PIN, and prompts the user to enter it.  It should return the entered
  PIN in string, or #f to indicate the user aborted the process.
  If the callback returns an empty string, it is called again.

  Twitter-authenticate-client returns an instance of <twitter-cred>.

[Function] twitter-home-timeline/sxml cred :key (since-id #f) (max-id #f)
                                                (count #f) (page #f))

  Access authenticated user's timeline.

[Function] twitter-mentions/sxml cred :key (since-id #f) (max-id #f)
                                           (count #f) (page #f))

  Returns tweets that mentiones to the authenticated user.

[Function] twitter-mentions cred :key (since-id #f) (max-id #f)
                                      (count #f) (page #f))

  The convenience version of twitter-mentions/sxml.   Returns a list
  of those four elements, sorted in the reverse chronological order:
    (tweet-id text user-screen-name user-id)

[Function] twitter-show/sxml cred tweet-id

  Returns a tweet specified by TWEET-ID.  CRED can be #f if accessing
  to a public tweet.

[Function] twitter-update/sxml cred message :key (in-reply-to-status-id #f)
                                              (lat #f) (long #f) (place-id #f)
                                              (display-coordinates #f))

  Post MESSAGE to the authenticated user.

[Function] twitter-update cred message :key (in-reply-to-status-id #f)
                                            (lat #f) (long #f) (place-id #f)
                                            (display-coordinates #f))

  Post MESSAGE to the authenticated user, and returns the tweet id.

[Function] twitter-destroy/sxml cred tweet-id

  Delete a tweet specified by TWEET-ID.

[Function] twitter-retweet/sxml cred tweet-id

  Retweet a tweet specified by TWEET-ID.

[Function] twitter-retweets/sxml cred tweet-id :key (count #f)

  Returns info of retweets of the specified tweet-id.

[Function] twitter-retweeted-by/sxml cred tweet-id :key (count #f) (page #f)

  Returns a list of users who retweeted the specified tweet.

[Function] twitter-retweeted-by-ids/sxml cred tweet-id
                                         :key (count #f) (page #f)

  Returns a list of user ids who retweeted the specified tweet.

[Function] twitter-user-show/sxml cred :key id user-id screen-name

  Show info of the user.  CRED can be #f to access only public info.

[Function] twitter-user-lookup/sxml cred :key (user-ids '()) (screen-names '())

  Returns info on the user listed in either user-ids or screen-names.

[Function] twitter-user-search/sxml cred q :key per-page page

  Search users matching the query Q.

[Function] twitter-friends/sxml cred :key id user-id screen-name cursor

  Returns list of friends of the user specified by either id, user-id,
  or screen-name.

[Function] twitter-friends/ids cred :key id user-id screen-name cursor

  Like above, but returns a list of user ids.


[Function] twitter-followers/sxml cred :key id user-id screen-name cursor

  Returns list of users following the user specified by either id, user-id,
  or screen-name.  This uses statuses/followers API.

[Function] twitter-followers/ids cred :key id user-id screen-name

  Like above, but returns a list of user ids.  This uses followers/ids API,
  and handles pagenation automatically to retrieve entire list of
  followers.



Credits:

This module is based on the code brewed among several blogs.

By Saito Atsushi: http://d.hatena.ne.jp/SaitoAtsushi/20100429/1272545442
By tana-laevatein: http://d.hatena.ne.jp/tana-laevatein/20100505/1273025284
By sirocco634: http://d.hatena.ne.jp/sirocco634/20100605#1275743091


